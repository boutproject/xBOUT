from pathlib import Path

import xarray as xr
import numpy as np

from .utils import _set_attrs_on_all_vars, _check_filetype, _separate_metadata


def _open_grid(ds, gridfilepath):
    """
    Opens the grid.nc file (as generated by Hypnotoad etc.), sets
    coordinates depending on what's in the file, and moves grid data to the
    attributes dict.
    """

    gridfilepath = Path(gridfilepath)
    grid = xr.open_dataset(gridfilepath, engine=_check_filetype(gridfilepath))

    # Merge into one dataset, with scalar vars in attrs
    grid, grid_metadata = _separate_metadata(grid)
    ds = xr.merge(ds, grid)
    ds = _set_attrs_on_all_vars(ds, 'grid', grid_metadata)

    # Define possible coordinate systems
    grid_type = grid.attrs.get('coordinates_type')
    if grid_type == 'orthogonal':
        # Change names of x, y, z to more informative ones
        ds = ds.rename({'x': 'r',
                        'y': 'theta',
                        'z': 'phi'})

        # Add 1D Orthogonal Toroidal coordinates
        # TODO use options to set this correctly
        ny, nz = ds.dims['theta'], ds.dims['phi']
        r = grid['hthe']
        r.attrs['units'] = 'm'
        theta = xr.DataArray(np.linspace(start=0, stop=2 * np.pi, num=ny),
                             dims='y')
        phi = xr.DataArray(np.linspace(start=0, stop=2 * np.pi, num=nz),
                           dims='phi')
        ds = ds.assign_coords({'r': r, 'theta': theta, 'phi': phi})

        # Add 2D Cylindrical coordinates
        ds = ds.assign_coords({'R': grid['Rxy'], 'Z': grid['Zxy']})

    elif grid_type is None:
        # TODO Some definition of slabs?
        raise ValueError("No coordinates_type in grid file")

    else:
        raise ValueError("Unrecognised coordinates type {}".format(grid_type))

    return ds
